package com.alura.foro.domain.topico;

import java.time.LocalDateTime;

import java.util.ArrayList;
import java.util.List;

import com.alura.foro.domain.curso.Curso;
import com.alura.foro.domain.respuesta.Respuesta;
import com.alura.foro.domain.usuario.Usuario;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity(name="Topico")
@Table(name="topicos")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(of = "id")
public class Topico {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	private String titulo;
	private String mensaje;
	private LocalDateTime fechaCreacion = LocalDateTime.now();
	@Enumerated(EnumType.STRING)
	private StatusTopico estatus = StatusTopico.NO_RESPONDIDO;
	
	@ManyToOne(fetch = FetchType.LAZY)
	//@JoinColumn(name = "usuario_id")
	private Usuario autor;
	
	@ManyToOne(fetch = FetchType.LAZY)
	//@JoinColumn(name = "curso_id")
	private Curso curso;
	@OneToMany(mappedBy = "topico", cascade=CascadeType.ALL)
	private List<Respuesta> respuestas = new ArrayList<>();
	private Boolean activo;
	/*private Long id;
	private String titulo;
	private String mensaje;
	private LocalDateTime fecha_creacion;
	private String estatus;
	private String autor;
	private String curso;*/
	
	public Topico(DatosRegistrarTopico datos) {
		this.activo=true;
		this.titulo = datos.titulo();
		this.mensaje = datos.mensaje();
		this.autor = new Usuario(datos.usuario());
		this.curso = new Curso(datos.curso());
	}

	public void actualizarDatos(DatosActualizarTopico datosActualizarTopico) {
		if(datosActualizarTopico.titulo() != null) {
			this.titulo = datosActualizarTopico.titulo();
		}
		
		if(datosActualizarTopico.mensaje() != null) {
			this.mensaje = datosActualizarTopico.mensaje();
		}
		
		if(datosActualizarTopico.autor() != null) {
			this.autor = datosActualizarTopico.autor();
		}
		
		if(datosActualizarTopico.curso() != null) {
			this.curso = datosActualizarTopico.curso();
		}
	}
	
	public void desactivarTopico() {
		this.activo=false;
	}
}
